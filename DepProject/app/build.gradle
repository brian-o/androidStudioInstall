plugins {
    id 'com.android.application'
    id 'com.lazan.dependency-export'
    id 'org.jetbrains.dokka'
   }


android {
    compileSdkVersion 30
    //buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.example.empty"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        missingDimensionStrategy 'artifactType', 'android-java-res'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
              systemProperty 'robolectric-offline', 'true'
            }
        }
    }

}

mavenDependencyExport {
    exportDir = new File("C:\\Package\\m2")
    systemProperties = ['java.version': '1.8']
    exportSources = true
    exportJavadoc = true
}

task downloadAppDependencies {
    dependsOn "mavenDependencyExport"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    def appcompat_version = "1.3.1"

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    // For loading and tinting drawables on older versions of the platform
    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.13'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    def nav_version = "2.3.5"
    // Java language implementation
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"


    implementation 'org.greenrobot:eventbus:3.2.0'

    implementation 'com.squareup.retrofit2:retrofit-adapters:2.8.1'
    implementation 'com.squareup.retrofit2:retrofit-converters:2.8.1'
    implementation 'com.squareup.retrofit2:retrofit-mock:2.8.1'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    testAnnotationProcessor 'com.google.auto.service:auto-service:1.0'

    testImplementation 'org.mockito:mockito-core:3.11.2'
    testImplementation 'org.powermock:powermock-api-mockito:1.7.4'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    
    def robolectricVersion = "4.6.1"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-supportv4:$robolectricVersion"
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"
    testImplementation "org.robolectric:shadows-playservices:$robolectricVersion"
    testImplementation "org.robolectric:shadows-httpclient:$robolectricVersion"
    annotationProcessor "org.robolectric:processor:$robolectricVersion"
    testImplementation "org.robolectric:errorprone:$robolectricVersion"
    // now declare the deps that robolectric uses at runtime so I can try and cache them
    // todo: Figure this out

    androidTestAnnotationProcessor 'com.google.auto.service:auto-service:1.0'

    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'androidx.test:monitor:1.4.0'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "com.google.truth.extensions:truth-java8-extension:1.1.3"
    testImplementation "androidx.test.ext:truth:1.4.0"

    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
 
 //Dagger
    def dagger_version="2.28.3"
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
        
 //Espresso
    def espresso_version="3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-remote:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version"
    androidTestImplementation "org.mockito:mockito-android:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

//Guava
    def guava_version="30.1.1-jre"    
    implementation "com.google.guava:guava:$guava_version"

//Room
    def room_version="2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation "androidx.room:room-rxjava3:$room_version"
    implementation "androidx.room:room-guava:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    implementation "androidx.room:room-paging:2.4.0-alpha04"


    def lifecycle_version = "2.3.1"
    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // Annotation processor
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    def activity_version = "1.3.0"
    implementation "androidx.activity:activity:$activity_version"

    def appsearch_version = "1.0.0-alpha03"
    implementation "androidx.appsearch:appsearch:$appsearch_version"
    // Use kapt instead of annotationProcessor if writing Kotlin classes
    annotationProcessor "androidx.appsearch:appsearch-compiler:$appsearch_version"
    implementation "androidx.appsearch:appsearch-local-storage:$appsearch_version"
    // PlatformStorage is compatible with Android 12+ devices, and offers additional features
    // to LocalStorage.
    implementation "androidx.appsearch:appsearch-platform-storage:$appsearch_version"

    implementation "androidx.asynclayoutinflater:asynclayoutinflater:1.0.0"
    implementation "androidx.autofill:autofill:1.1.0"

    implementation "androidx.biometric:biometric:1.1.0"
    implementation "androidx.browser:browser:1.3.0"

    // CameraX core library using the camera2 implementation
    def camerax_version = "1.0.1"
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha27"
    // If you want to additionally use the CameraX Extensions library
    implementation "androidx.camera:camera-extensions:1.0.0-alpha27"

    implementation "androidx.cardview:cardview:1.0.0"

    def collection_version = "1.2.0-alpha01"
    // Java language implementation
    implementation "androidx.collection:collection:$collection_version"

    implementation "androidx.concurrent:concurrent-futures:1.1.0"
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.1.0"
    implementation "androidx.cursoradapter:cursoradapter:1.0.0"
    implementation "androidx.customview:customview:1.1.0"

    // caligraphy. Font switching library
    implementation 'io.github.inflationx:calligraphy3:3.1.1'
    implementation 'io.github.inflationx:viewpump:2.0.3'
    // exo video player
    implementation "com.google.android.exoplayer:exoplayer:2.6.0"

    implementation "androidx.datastore:datastore:1.0.0-rc02"
    implementation "androidx.datastore:datastore-rxjava2:1.0.0-rc02"
    implementation "androidx.datastore:datastore-rxjava3:1.0.0-rc02"
    implementation "androidx.datastore:datastore-core:1.0.0-rc02"

    implementation "androidx.datastore:datastore-preferences:1.0.0-rc02"
    implementation "androidx.datastore:datastore-preferences-rxjava2:1.0.0-rc02"
    implementation "androidx.datastore:datastore-preferences-rxjava3:1.0.0-rc02"
    implementation "androidx.datastore:datastore-preferences-core:1.0.0-rc02"

    implementation "androidx.documentfile:documentfile:1.0.1"
    implementation "androidx.drawerlayout:drawerlayout:1.1.1"

    // moshi
    implementation("com.squareup.moshi:moshi:1.12.0")

    implementation "androidx.emoji:emoji:1.1.0"
    implementation "androidx.emoji:emoji-appcompat:1.1.0"
    implementation "androidx.emoji:emoji-bundled:1.1.0"

    def emoji2_version = "1.0.0-alpha03"
    implementation "androidx.emoji2:emoji2:$emoji2_version"
    implementation "androidx.emoji2:emoji2-views:$emoji2_version"
    implementation "androidx.emoji2:emoji2-views-helper:$emoji2_version"

    def enterprise_version = "1.1.0"
    implementation "androidx.enterprise:enterprise-feedback:$enterprise_version"
    // For testing enterprise feedback in isolation
    implementation "androidx.enterprise:enterprise-feedback-testing:$enterprise_version"

    implementation "androidx.exifinterface:exifinterface:1.3.2"

    def fragment_version = "1.3.6"

    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"

    implementation "androidx.gridlayout:gridlayout:1.0.0"
    implementation "androidx.health:health-services-client:1.0.0-alpha01"
    implementation "androidx.heifwriter:heifwriter:1.1.0-alpha01"

    implementation "androidx.media:media:1.4.0"
    implementation "androidx.mediarouter:mediarouter:1.2.4"

    def paging_version = "3.0.1"

    implementation "androidx.paging:paging-runtime:$paging_version"
    // alternatively - without Android dependencies for tests
    testImplementation "androidx.paging:paging-common:$paging_version"
    // optional - RxJava2 support
    implementation "androidx.paging:paging-rxjava2:$paging_version"
    // optional - RxJava3 support
    implementation "androidx.paging:paging-rxjava3:$paging_version"
    // optional - Guava ListenableFuture support
    implementation "androidx.paging:paging-guava:$paging_version"

    def preference_version = "1.1.1"
    // Java language implementation
    implementation "androidx.preference:preference:$preference_version"

    implementation "androidx.profileinstaller:profileinstaller:1.0.0"

    implementation "androidx.recyclerview:recyclerview:1.2.1"
    // For control over item selection of both touch and mouse driven selection
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"
    
    implementation "androidx.resourceinspection:resourceinspection-annotation:1.0.0-alpha03"
    implementation "androidx.savedstate:savedstate:1.1.0"

    implementation "androidx.security:security-crypto:1.0.0"
    // For Identity Credential APIs
    implementation "androidx.security:security-identity-credential:1.0.0-alpha02"
     // For App Authentication APIs
    implementation "androidx.security:security-app-authenticator:1.0.0-alpha02"
    // For App Authentication API testing
    androidTestImplementation "androidx.security:security-app-authenticator:1.0.0-alpha01"

    implementation "androidx.sharetarget:sharetarget:1.1.0"
    implementation "androidx.slice:slice-builders:1.1.0-alpha02"
    implementation "androidx.slice:slice-core:1.1.0-alpha02"
    implementation "androidx.slice:slice-view:1.1.0-alpha02"
    implementation "androidx.slidingpanelayout:slidingpanelayout:1.1.0"

    def sqlite_version = "2.1.0"
    // Java language implementation
    implementation "androidx.sqlite:sqlite:$sqlite_version"
    // Implementation of the AndroidX SQLite interfaces via the Android framework APIs.
    implementation "androidx.sqlite:sqlite-framework:$sqlite_version"

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.textclassifier:textclassifier:1.0.0-alpha03"
    implementation "androidx.transition:transition:1.4.1"

    implementation "androidx.vectordrawable:vectordrawable:1.1.0"

    /* To be able to animate properties of a VectorDrawable, add the following.  Useful for
     * illustration purposes or state changes in response to user events
     */
    implementation "androidx.vectordrawable:vectordrawable-animated:1.1.0"

    /* To use a seekable alternative for `androidx.vectordrawable:vectordrawable-animated` add the
     * following
     */
    implementation "androidx.vectordrawable:vectordrawable-seekable:1.0.0-alpha02"
    implementation "androidx.webkit:webkit:1.4.0"

    implementation "androidx.window:window:1.0.0-alpha09"
    // For Java-friendly APIs to register and unregister callbacks
    implementation "androidx.window:window-java:1.0.0-alpha09"
    // For RxJava2 integration
    implementation "androidx.window:window-rxjava2:1.0.0-alpha09"
    // For RxJava3 integration
    implementation "androidx.window:window-rxjava3:1.0.0-alpha09"
    // For testing
    implementation "androidx.window:window-testing:1.0.0-alpha09"

    def work_version = "2.5.0"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"
    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"





}