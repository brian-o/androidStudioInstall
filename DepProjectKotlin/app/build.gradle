apply plugin: "com.lazan.dependency-export"
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs.kotlin"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.myapplication2"
        minSdkVersion 27
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        missingDimensionStrategy ('artifactType', 'android-java-res')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
              useJUnitPlatform()
            }
        }
    }
}
dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }   
    }
}
mavenDependencyExport {
    exportDir = new File(outputRoot)
    systemProperties = ['java.version': '1.8']
    exportSources = true
    exportJavadoc = true
}
task downloadAppDependencies {
    dependsOn "mavenDependencyExport"
}
kapt {
    correctErrorTypes true
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"


    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1'

    testImplementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"


    testImplementation 'junit:junit:4.13.2'

    implementation 'io.reactivex.rxjava3:rxjava:3.0.13'
    implementation 'io.reactivex.rxjava3:rxkotlin:3.0.1'

    def guava_version="30.1.1"    
    implementation "com.google.guava:guava:$guava_version-android"

    def lifecycle_version = "2.3.1"
    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    def activity_version = "1.3.1"
    implementation "androidx.activity:activity-ktx:$activity_version"

    def appsearch_version = "1.0.0-alpha03"
    implementation "androidx.appsearch:appsearch:$appsearch_version"
    // Use kapt instead of annotationProcessor if writing Kotlin classes
    kapt "androidx.appsearch:appsearch-compiler:$appsearch_version"
    implementation "androidx.appsearch:appsearch-local-storage:$appsearch_version"
    // PlatformStorage is compatible with Android 12+ devices, and offers additional features
    // to LocalStorage.
    implementation "androidx.appsearch:appsearch-platform-storage:$appsearch_version"

    implementation "androidx.biometric:biometric-ktx:1.2.0-alpha03"

    def collection_version = "1.2.0-alpha01"
    implementation "androidx.collection:collection-ktx:$collection_version"

    implementation "androidx.concurrent:concurrent-futures-ktx:1.1.0"

    implementation("com.squareup.moshi:moshi-kotlin:1.12.0")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.12.0")

    def fragment_version = "1.3.6"
    // Kotlin
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    // Testing Fragments in Isolation
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    // hilt
    implementation 'com.google.dagger:hilt-android:2.38.1'
    kapt 'com.google.dagger:hilt-compiler:2.38.1'

    // For instrumentation tests
    androidTestImplementation  'com.google.dagger:hilt-android-testing:2.38.1'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.38.1'

    // For local unit tests
    testImplementation 'com.google.dagger:hilt-android-testing:2.38.1'
    kaptTest 'com.google.dagger:hilt-compiler:2.38.1'

    def nav_version = "2.3.5"
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    def preference_version = "1.1.1"
    // Kotlin
    implementation "androidx.preference:preference-ktx:$preference_version"
    implementation "androidx.savedstate:savedstate-ktx:1.1.0"


    def sqlite_version = "2.1.0"
    // Kotlin
    implementation "androidx.sqlite:sqlite-ktx:$sqlite_version"
    implementation "androidx.transition:transition-ktx:1.4.1"

    def work_version = "2.5.0"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"
    // optional - Test helpers
    androidTestImplementation "androidx.work:work-testing:$work_version"
    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"

    implementation 'com.github.takusemba:spotlight:2.0.5'

    testImplementation "io.mockk:mockk:1.12.0"
    androidTestImplementation "io.mockk:mockk-android:1.12.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"

    def kotest_version = "4.6.1"
    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-runner-junit4:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core:$kotest_version"
    testImplementation "io.kotest:kotest-property:$kotest_version"
    testImplementation("io.kotest.extensions:kotest-extensions-robolectric:0.4.0")
    testImplementation "io.kotest.extensions:kotest-extensions-koin:1.0.0"
    testImplementation "io.kotest.extensions:kotest-assertions-ktor:1.0.3"

    implementation "io.ktor:ktor-server-core:1.6.2"
    implementation "io.ktor:ktor-server-netty:1.6.2"
    implementation "ch.qos.logback:logback-classic:1.2.5"
    testImplementation "io.ktor:ktor-server-test-host:1.6.2"

    def koin_version = "3.1.2"
    // Koin for Kotlin apps
    compile "io.insert-koin:koin-core:$koin_version"
    // Testing
    testCompile "io.insert-koin:koin-test:$koin_version"

    def arrow_version = "0.13.2"
    implementation platform("io.arrow-kt:arrow-stack:$arrow_version")
    implementation "io.arrow-kt:arrow-core"
    implementation "io.arrow-kt:arrow-fx-coroutines"
    implementation "io.arrow-kt:arrow-optics"
    kapt "io.arrow-kt:arrow-meta"
}
